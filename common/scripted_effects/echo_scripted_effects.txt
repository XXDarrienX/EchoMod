echo_remove_traits = {
	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Cyclopean }
			}
		}
		remove_trait = complex_admiral_trait_Blurred_Vision
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Energy_Being }
			}
		}
		remove_trait = complex_admiral_trait_Energy_Infusion_Crew
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Acidic_Species }
			}
		}
		remove_trait = complex_admiral_trait_Acidic_Crew
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Berserk_Gene }
			}
		}
		remove_trait = complex_admiral_trait_Berserk_Crew
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Electro_Biogensisis }
			}
		}
		remove_trait = complex_admiral_trait_Bio_Electric_Crew
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Natural_Flight }
			}
		}
		remove_ruler_trait = complex_ruler_trait_Flying_Engineers
		remove_trait = complex_general_trait_Flight_Assisted_Troops
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Naturally_Psionic }
			}
		}
		remove_trait = leader_trait_expertise_psionics
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Genetic_Memory }
			}
		}
		remove_ruler_trait = complex_ruler_trait_Rememberance
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Shared_Consciousness }
			}
		}
		remove_ruler_trait = complex_ruler_trait_Mental_Link
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Powerful_Thermal_Biogenesis }
			}
		}
		remove_trait = complex_governor_trait_Natural_Welders
		remove_trait = complex_admiral_trait_Natural_Welders
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Precognitive_Species }
			}
		}
		remove_trait = complex_admiral_trait_Precognitive_Evasion
		remove_trait = complex_general_trait_Combat_Precognition
		remove_trait = complex_scientist_trait_Trouble_Aversion
		remove_trait = complex_governor_trait_Future_Lockdown
		remove_ruler_trait = complex_ruler_trait_Far_Seeing
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Adorable_Species }
			}
		}
		remove_ruler_trait = complex_species_trait_Adorable_Species_rul
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = complex_species_trait_Swarming }
			}
		}
		remove_ruler_trait = complex_species_trait_Swarming_rul
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_additrait_hateful }
			}
		}
		remove_ruler_trait = trait_additrait_hateful_rul
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_additrait_born_warriors }
			}
		}
		remove_trait = trait_additrait_born_warriors_adm
		remove_trait = trait_additrait_born_warriors_gen
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_additrait_belligerent }
			}
		}
		remove_ruler_trait = trait_additrait_belligerent_rul
	}
	
	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_additrait_pioneers }
			}
		}
		remove_ruler_trait = trait_additrait_pioneers_rul
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_additrait_rooted }
			}
		}
		remove_ruler_trait = trait_additrait_rooted_rul
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_additrait_influential }
			}
		}
		remove_ruler_trait = trait_additrait_influential_rul
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_additrait_planetary_designers }
			}
		}
		remove_ruler_trait = trait_additrait_planetary_designers_rul
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_additrait_planetary_gardeners }
			}
		}
		remove_ruler_trait = trait_additrait_planetary_gardeners_rul
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_additrait_sky_born }
			}
		}
		remove_trait = trait_additrait_sky_born_adm
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_predatory }
			}
		}
		remove_ruler_trait = trait_predatory_rul
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_evolved_brains }
			}
		}
		remove_ruler_trait = trait_evolved_brains_rul
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_agoraphobic }
			}
		}
		remove_ruler_trait = trait_agoraphobic_rul
	}

	if = {
		limit = {
			species = {
				NOT = { has_trait = trait_additrait_mob_mentality }
			}
		}
		remove_ruler_trait = trait_additrait_mob_mentality_rul
	}
}


echo_add_traits = {
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Cyclopean
			}
		}
			if = {
				limit = { leader_class = admiral }
				add_trait = complex_admiral_trait_Blurred_Vision
			}
		}
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Energy_Being
			}
		}
			if = {
				limit = { leader_class = admiral }
				add_trait = complex_admiral_trait_Energy_Infusion_Crew
			}
		}
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Acidic_Species
			}
		}
			if = {
				limit = { leader_class = admiral }
				add_trait = complex_admiral_trait_Acidic_Crew
			}
		}
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Berserk_Gene
			}
		}
			if = {
				limit = { leader_class = admiral }
				add_trait = complex_admiral_trait_Berserk_Crew
			}
		}
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Electro_Biogensisis
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = complex_admiral_trait_Bio_Electric_Crew 
		}
	}
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Natural_Flight
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_ruler_trait = complex_ruler_trait_Flying_Engineers
		}
		if = {
			limit = { leader_class = general }
			add_trait = complex_general_trait_Flight_Assisted_Troops
			add_ruler_trait = complex_ruler_trait_Flying_Engineers
		}
		add_ruler_trait = complex_ruler_trait_Flying_Engineers
	}
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Naturally_Psionic
			}
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = leader_trait_expertise_psionics
		}
	}
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Genetic_Memory
			}
		}
		add_ruler_trait = complex_ruler_trait_Rememberance
	}
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Shared_Consciousness
			}
		}
		add_ruler_trait = complex_ruler_trait_Mental_Link
	}
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Powerful_Thermal_Biogenesis
			}
		}
		if = {
			limit = { leader_class = governor }
			add_trait = complex_governor_trait_Natural_Welders
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = complex_admiral_trait_Natural_Welders
		}
	}
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Precognitive_Species
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = complex_admiral_trait_Precognitive_Evasion
			add_ruler_trait = complex_ruler_trait_Far_Seeing
		}
		if = {
			limit = { leader_class = general }
			add_trait = complex_general_trait_Combat_Precognition
			add_ruler_trait = complex_ruler_trait_Far_Seeing
		}
		if = {
			limit = { leader_class = scientist }
			add_trait = complex_scientist_trait_Trouble_Aversion
			add_ruler_trait = complex_ruler_trait_Far_Seeing
		}
		if = {
			limit = { leader_class = governor }
			add_trait = complex_general_trait_Combat_Precognition
			add_ruler_trait = complex_ruler_trait_Far_Seeing
		}
		if = {
			limit = { leader_class = ruler }
			add_ruler_trait = complex_ruler_trait_Far_Seeing
		}
	}
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Adorable_Species
			}
		}
		add_ruler_trait = complex_species_trait_Adorable_Species_rul
	}
	if = {
		limit = {
			species = {
				has_trait = complex_species_trait_Swarming
			}
		}
		add_ruler_trait = complex_species_trait_Swarming_rul
	}
	if = {
		limit = {
			species = {
				has_trait = trait_additrait_hateful
			}
		}
		add_ruler_trait = trait_additrait_hateful_rul
	}
	if = {
		limit = {
			species = {
				has_trait = trait_additrait_born_warriors
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = trait_additrait_born_warriors_adm
		}
		if = {
			limit = { leader_class = general }
			add_trait = trait_additrait_born_warriors_gen
		}
	}
	if = {
		limit = {
			species = {
				has_trait = trait_additrait_belligerent
			}
		}
		add_ruler_trait = trait_additrait_belligerent_rul
	}
	if = {
		limit = {
			species = {
				has_trait = trait_additrait_pioneers
			}
		}
		add_ruler_trait = trait_additrait_pioneers_rul
	}
	if = {
		limit = {
			species = {
				has_trait = trait_additrait_rooted
			}
		}
		add_ruler_trait = trait_additrait_rooted_rul
	}
	if = {
		limit = {
			species = {
				has_trait = trait_additrait_influential
			}
		}
		add_ruler_trait = trait_additrait_influential_rul
	}
	if = {
		limit = {
			species = {
				has_trait = trait_additrait_planetary_designers
			}
		}
		add_ruler_trait = trait_additrait_planetary_designers_rul
	}
	if = {
		limit = {
			species = {
				has_trait = trait_additrait_planetary_gardeners
			}
		}
		add_ruler_trait = trait_additrait_planetary_gardeners_rul
	}
	if = {
		limit = {
			species = {
				has_trait = trait_additrait_sky_born
			}
		}
		if = {
			limit = { leader_class = admiral }
			add_trait = trait_additrait_sky_born_adm
		}
	}
	if = {
		limit = {
			species = {
				has_trait = trait_predatory
			}
		}
		add_ruler_trait = trait_predatory_rul
	}
	if = {
		limit = {
			species = {
				has_trait = trait_evolved_brains
			}
		}
		add_ruler_trait = trait_evolved_brains_rul
	}
	if = {
		limit = {
			species = {
				has_trait = trait_agoraphobic
			}
		}
		add_ruler_trait = trait_agoraphobic_rul
	}

	if = {
		limit = {
			species = {
				has_trait = trait_additrait_mob_mentality
			}
		}
		add_ruler_trait = trait_additrait_mob_mentality_rul
	}
}

generate_start_pops = {
	if = {
		limit = {
			owner = {
				OR = {
					has_origin = origin_syncretic_evolution
					has_valid_civic = civic_machine_servitor
					has_valid_civic = civic_machine_assimilator
				}
			}
		}

		if = { limit = { last_created_species = { is_species_class = MACHINE } }
			modify_species = {
				species = last_created_species
				add_trait = trait_machine_unit
				add_traits_at_start_of_list = yes
			}
			last_created_species = { save_event_target_as = last_created_species }
		}

		if = {
			limit = { owner = { has_origin = origin_syncretic_evolution } }

			last_created_species = {
				set_species_flag = syncretic_species@root.owner
				set_citizenship_type = {
					country = root.owner
					type = citizenship_slavery
				}
			}
			while = {
				count = 12
				create_pop = {
					species = last_created_species
					ethos = random
				}
			}
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			last_created_species = {
				set_citizenship_type = {
					country = root.owner
					type = citizenship_limited
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_organic_trophy
				}
			}
			while = {
				count = 5
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
		}

		if = {
			limit = { owner = { has_valid_civic = civic_machine_assimilator } }
			last_created_species = {
				set_citizenship_type = {
					country = root.owner
					type = citizenship_full_machine
				}
				set_living_standard = {
					country = root.owner
					type = living_standard_hive_mind
				}
			}
			while = {
				count = 10
				create_pop = {
					species = last_created_species
					ethos = random
				}
				last_created_pop = {
					clear_ethos = yes
				}
			}
		}
	}
	if = {
		limit = { owner = { has_origin = origin_mechanists } }
		owner = { create_built_robot_species = yes }
		while = {
			count = 8
			create_pop = {
				species = last_created_species
			}
		}

		add_building = building_robot_assembly_plant
		add_district_and_planet_size_if_needed_effect = {
			district = district_generator
		}
		while = {
			limit = { num_pops < 27 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { has_origin = origin_hive_overmind } }
		
		last_created_species = {
			set_species_flag = overminded_flag
			save_event_target_as = overminded_species
			
			}
			event_target:overminded_species = {
			if = {
				limit = { is_lithoid = yes }
				root = { owner = { set_country_flag = lithoid_overminded_species } }
			}
			else = { root = { owner = { set_country_flag = organic_overminded_species } } }
			}
		while = {
			limit = { num_pops < 34 }
			create_pop = {
				species = last_created_species
				ethos = random
			}
		}
	}
	if = {
		limit = { 
			owner = {
				is_hive_empire = yes
				NOT = { has_origin = origin_hive_overmind }
			} 		
		}
		while = {
			limit = { num_pops < 34 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}

	if = { 
		limit = { owner = { has_origin = origin_religious_constructs } }
		owner = { create_built_robot_species = yes }
		while = {
			count = 4
			create_pop = {
				species = last_created_species
			} 
		if = { limit = { last_created_species = { is_species_class = ROBOT } }
			set_species_flag = holy_robots
		}
	}
		add_building = building_robot_assembly_plant		
		add_district = district_generator
		while = {
			limit = { num_pops < 27 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}

	else_if = {
		limit = { owner = { is_hive_empire = yes } }
		while = {
			limit = { num_pops < 32 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	else_if = {
		limit = { owner = { has_valid_civic = civic_machine_servitor } }
		while = {
			limit = { num_pops < 39 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}				
	}
	else_if = {
		limit = { owner = { is_machine_empire = yes} }
		while = {
			limit = { num_pops < 29 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}				
	}
	else_if = {
		limit = { owner = { is_megacorp = yes} }
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}				
	}
	else = {
		while = {
			limit = { num_pops < 24 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}		
	}	
	if = {
		limit = { owner = { is_hive_empire = yes } }
		while = {
			limit = { num_pops < 34 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { has_valid_civic = civic_machine_servitor } }
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_machine_empire = yes } }
		while = {
			limit = { num_pops < 29 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_megacorp = yes} }
		while = {
			limit = { num_pops < 30 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = { owner = { is_regular_empire = yes } }
		while = {
			limit = { num_pops < 28 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
			owner = { is_regular_empire = yes }
		}
		while = {
			limit = { num_pops < 32 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
			owner = { is_machine_empire = yes }
		}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
			owner = { is_hive_empire = yes }
		}
		while = {
			limit = { num_pops < 35 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
			owner = { is_megacorp = yes }
		}
		while = {
			limit = { num_pops < 34 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
			owner = { has_valid_civic = civic_machine_servitor }
		}
		while = {
			limit = { num_pops < 37 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
	if = {
		limit = {
			owner = { has_origin = origin_default }
			owner = { has_valid_civic = civic_machine_assimilator }
		}
		while = {
			limit = { num_pops < 33 }
			create_pop = {
				species = owner_main_species
				ethos = random
			}
		}
	}
}

scion_fe_intervention = {
	if = {
		limit = { fleet_power < 65000 }
		root = { create_fe_intervention_1 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 65001
			fleet_power < 90000
		}
		root = { create_fe_intervention_2 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 90001
			fleet_power < 100000
		}
		root = { create_fe_intervention_3 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 100001
			fleet_power < 120000
		}
		root = { create_fe_intervention_4 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 120001
			fleet_power < 150000
		}
		root = { create_fe_intervention_5 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 150001
			fleet_power < 300000
		}
		root = { create_fe_intervention_6 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 300001
			fleet_power < 500000
		}
		root = { create_fe_intervention_7 = yes }
	}
	else_if = {
		limit = {
			fleet_power >= 500001
		}
		root = { create_fe_intervention_8 = yes }
	}
}

create_fe_intervention_1 = {
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 1
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_2 = {
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 3
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_3 = {
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 1
					create_fallen_empire_large_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_4 = {
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 1
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 2
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_5 = {
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 1
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 4
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_6 = {
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 2
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 4
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_7 = {
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 3
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 6
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

create_fe_intervention_8 = {
	set_country_flag = borrowed_fleet_from@event_target:scion_master
	create_fe_intervention_leader = yes
	capital_scope = {
		create_fleet = {
			effect = {
				set_owner = event_target:scion_master # For ship names
				set_fleet_flag = scion_borrowed_fleet
				while = {
					count = 6
					create_fallen_empire_large_ship = yes
				}
				while = {
					count = 12
					create_fallen_empire_small_ship = yes
				}
				set_location = {
					target = prev
					distance = 45
					angle = random
				}
				set_owner = root
				assign_leader = event_target:fe_intervention_admiral
				add_modifier = {
					modifier = echo_Scion_balance
					days = -1
				}
			}
			settings = {
				can_upgrade = no
				can_disband = no
				can_change_composition = no
				can_change_leader = no
				uses_naval_capacity = no
				spawn_debris = no
			}
		}
	}
}

# Special for Earth
generate_earth_deposits_and_blockers = {
	clear_deposits = yes
	add_deposit = d_mesopotamian_urban_corridor
	add_deposit = d_boswash_metropolitan_axis
	add_deposit = d_mauritanian_security_zone
	add_deposit = d_great_albertan_crater
	add_deposit = d_scandinavian_reclamation_sector
	add_deposit = d_saharan_irrigation_project
	add_deposit = d_pearl_river_agglomerate
	add_deposit = d_great_pacific_garbage_patch
	add_deposit = d_failing_infrastructure_earth
	add_deposit = d_decrepit_dwellings
	if = {
		limit = { owner = { is_machine_empire = yes } }
		add_deposit = d_rushing_waterfalls
	}
	if = {
		limit = { owner = { has_valid_civic = civic_machine_servitor } }
		add_deposit = d_hot_springs
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				NOT = { has_valid_civic = civic_hive_devouring_swarm }
			}
		}
		while = {
			count = 4
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		while = {
			count = 2
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_life_seeded
			}
		}

		set_planet_size = 30

		add_deposit = d_dust_caverns
		add_deposit = d_bubbling_swamp
		add_deposit = d_crystalline_caverns
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_hive
			}
		}

		set_planet_size = 30
	}
}

# This is called after game start
generate_start_deposits_and_blockers = {
	clear_deposits = yes

	# blockers
	if = {
		limit = {
			owner = {
				has_origin = origin_post_apocalyptic
			}
		}
		add_deposit = d_tomb_world_ruins
		add_deposit = d_tomb_world_wasteland
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_terminator
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_exterminators_ruins
		add_deposit = d_former_battlefield
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_servitor
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_unsupervised_settlement
	}
	else_if = {
		limit = {
			owner = {
				has_civic = civic_machine_assimilator
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_assimilators_ruins
	}
	else_if = {
		limit = {
			owner = {
				has_authority = auth_machine_intelligence
				NOT = { has_origin = origin_machine }
			}
		}

		add_deposit = d_strip_mine
		add_deposit = d_machine_empire_ruins
	}
	else_if = {
		limit = {
			owner = {
				has_authority = auth_hive_mind
			}
		}

		add_deposit = d_collapsed_burrows
		add_deposit = d_failing_infrastructure
		add_deposit = d_failing_infrastructure
	}
	else_if = {
		limit = {
			owner = {
				NOT = { has_origin = origin_machine }
			}
		}
		add_deposit = d_decrepit_dwellings
		add_deposit = d_failing_infrastructure
		add_deposit = d_failing_infrastructure
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				NOR = {
					has_valid_civic = civic_hive_devouring_swarm
					has_origin = origin_lithoid
				}
			}
		}
		while = {
			count = 4
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				is_lithoid_empire = yes
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
		while = {
			count = 2
			add_deposit = d_hibernating_lithoids
		}
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_post_apocalyptic
			}
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_searing_desert
		add_deposit = d_underwater_vent

		# 3 + 4 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_submerged_ore_veins

		# 3 + 2 farming
		add_deposit = d_lichen_fields
		add_deposit = d_fungal_caves
		add_deposit = d_fungal_forest
	}

	if = {
		limit = {
			owner = {
				has_civic = civic_machine_terminator
			}
		}

		# 4 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_searing_desert
		add_deposit = d_underwater_vent
		add_deposit = d_searing_desert

		# 4 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_submerged_ore_veins

		# 3 farming
		add_deposit = d_lichen_fields
		add_deposit = d_fungal_caves
	}

	if = {
		limit = {
			owner = {
				has_origin = origin_life_seeded
			}
		}

		set_planet_size = 30

		# 5 + 3 energy
		add_deposit = d_searing_desert
		add_deposit = d_underwater_vent
		add_deposit = d_tempestous_mountain

		# 5 + 3 mining
		add_deposit = d_ore_rich_caverns
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 5 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_lush_jungle
		add_deposit = d_teeming_reef

		if = {
			limit = { owner = { is_lithoid_empire = yes } }
			add_deposit = d_rich_mountain
		}
		else = {
			add_deposit = d_black_soil
		}

		# 1 random medium deposit
		random_list = {
			33 = { add_deposit = d_frozen_gas_lake }
			33 = { add_deposit = d_prosperous_mesa }
			33 = { add_deposit = d_fertile_lands }
		}

		add_deposit = d_dust_caverns
		add_deposit = d_bubbling_swamp
		add_deposit = d_crystalline_caverns
	}

	if = {
		limit = {
			is_planet_class = pc_continental
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_rushing_waterfalls
		add_deposit = d_tempestous_mountain
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_rushing_waterfalls
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_prosperous_mesa
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_rugged_woods
		add_deposit = d_fertile_lands
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_rugged_woods

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_black_soil
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_tropical
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_rushing_waterfalls
		add_deposit = d_tempestous_mountain
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_rushing_waterfalls
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_green_hills
		add_deposit = d_lush_jungle
		if = {
			limit = { owner = { is_machine_empire = no } }
			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_submerged_ore_veins
			}
			else = {
				add_deposit = d_green_hills
				add_deposit = d_tropical_island
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_ocean
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_rushing_waterfalls
		add_deposit = d_underwater_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_rushing_waterfalls
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_ore_rich_caverns
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_green_hills
		add_deposit = d_lush_jungle
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_green_hills

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_submerged_ore_veins
			}
			else = {
				add_deposit = d_teeming_reef
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_arctic
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_frozen_gas_lake
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_frozen_gas_lake
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_lichen_fields
		add_deposit = d_fungal_caves
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_lichen_fields

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_fungal_forest
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_tundra
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_frozen_gas_lake
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_frozen_gas_lake
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_forgiving_tundra
		add_deposit = d_fungal_caves
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_forgiving_tundra

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_fungal_forest
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_alpine
		}

		# 3 + 3 energy
		add_deposit = d_hot_springs
		add_deposit = d_frozen_gas_lake
		add_deposit = d_tempestous_mountain
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_frozen_gas_lake
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_hot_springs
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_forgiving_tundra
		add_deposit = d_fungal_caves
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_forgiving_tundra

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_fungal_forest
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_desert
		}

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_nutritious_mudland
		add_deposit = d_great_river
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_nutritious_mudland

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_marvelous_oasis
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_arid
		}

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_veiny_cliffs
		add_deposit = d_ore_rich_caverns
		add_deposit = d_rich_mountain

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_bountiful_plains
		add_deposit = d_great_river
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_bountiful_plains

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_tropical_island
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_savannah
		}

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming (lithoids swap 3 for minerals)
		add_deposit = d_bountiful_plains
		add_deposit = d_fertile_lands
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_bountiful_plains

			if = {
				limit = { owner = { is_lithoid_empire = yes } }
				add_deposit = d_rich_mountain
			}
			else = {
				add_deposit = d_black_soil
			}
		}
	}

	if = {
		limit = {
			is_planet_class = pc_relic
			owner = {
				has_origin = origin_remnants
			}
		}

		set_planet_size = 30

		# 5 blockers
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology
		add_deposit = d_ruined_arcology

		# 3 + 3 energy
		add_deposit = d_arid_highlands
		add_deposit = d_searing_desert
		add_deposit = d_geothermal_vent
		if = {
			limit = { owner = { is_machine_empire = yes } }
			add_deposit = d_searing_desert
		}
		if = {
			limit = { owner = { has_valid_civic = civic_machine_servitor } }
			add_deposit = d_arid_highlands
		}

		# 3 + 3 mining
		add_deposit = d_mineral_fields
		add_deposit = d_prosperous_mesa
		add_deposit = d_submerged_ore_veins

		# 4 + 3 farming
		add_deposit = d_bountiful_plains
		add_deposit = d_fertile_lands
		if = {
			limit = { owner = { is_machine_empire = no } }
			add_deposit = d_bountiful_plains
			add_deposit = d_black_soil
		}
	}
	if = {
		limit = {
			is_planet_class = pc_machine
			owner = {
				has_origin = origin_machine
			}
		}
		set_planet_size = 30
	}
}