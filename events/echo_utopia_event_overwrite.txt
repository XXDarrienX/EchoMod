namespace = utopia

#Diplomatic Event: A neighbor is building a ring world#
country_event = {
	id = utopia.1
		title = "utopia.1.name"
		desc = { 		
			trigger = {
				switch = {				
					trigger = has_ethic 				
					ethic_fanatic_xenophobe = { text = utopia.1.desc.v1 }
					ethic_fanatic_xenophile = { text = utopia.1.desc.v2 }
					ethic_fanatic_materialist = { text = utopia.1.desc.v2 }
					ethic_fanatic_spiritualist = { text = utopia.1.desc.v4 }
					ethic_fanatic_authoritarian = { text = utopia.1.desc.v1 }
					ethic_fanatic_egalitarian = { text = utopia.1.desc.v2 }
					ethic_fanatic_militarist = { text = utopia.1.desc.v1 }
					ethic_fanatic_pacifist = { text = utopia.1.desc.v2 }
				}
			}	
		}		
		picture = GFX_evt_ringworld
		show_sound = event_conversation	
		location = event_target:ring_world.capital_scope
	
		trigger = {
			is_country_type = default
			AND = {
				any_neighbor_country = {
					any_owned_megastructure = {
						OR = { 
							is_megastructure_type = ring_world_1
							is_megastructure_type = ring_world_2
						}
						is_upgrading = yes
					}
					is_country_type = default
					has_communications = root
					NOR = {
						has_country_flag = ringworld_diplomatic_event
						is_at_war_with = ROOT
						is_subject_type = vassal
						is_same_value = root
					}	
				}
				OR = {
					has_ethic = ethic_fanatic_xenophobe
					has_ethic = ethic_fanatic_xenophile
					has_ethic = ethic_fanatic_materialist
					has_ethic = ethic_fanatic_spiritualist
					has_ethic = ethic_fanatic_authoritarian
					has_ethic = ethic_fanatic_egalitarian
					has_ethic = ethic_fanatic_militarist
					has_ethic = ethic_fanatic_pacifist
				}
	
				NOR = { 
					has_country_flag = ringworld_diplomatic_event 
					has_valid_civic = civic_fanatic_purifiers
				}		
			}
		}
		mean_time_to_happen = { days = 3600 }
	
		immediate = {
			random_neighbor_country = {
				limit = {
					any_owned_megastructure = {
						OR = { 
							is_megastructure_type = ring_world_1
							is_megastructure_type = ring_world_2
						}
						is_upgrading = yes
					}
					NOR = {
						has_country_flag = ringworld_diplomatic_event
						is_at_war_with = ROOT
						is_subject_type = vassal
						is_same_value = root
					}
					is_country_type = default
					has_communications = root
				}
				random_owned_megastructure = {
					limit = {
						OR = { 
							is_megastructure_type = ring_world_1
							is_megastructure_type = ring_world_2
						}
						is_upgrading = yes
					}
					save_event_target_as = ring_world
				}
				save_event_target_as = ringworld_builder
				event_target:ringworld_builder = {
					set_country_flag = ringworld_diplomatic_event
				}
			}
			set_country_flag = ringworld_diplomatic_event
			switch = {
				trigger = has_ethic 
				ethic_fanatic_xenophobe = { set_country_flag = ethic_xenophobe }
				ethic_fanatic_xenophile = { set_country_flag = ethic_xenophile }
				ethic_fanatic_materialist = { set_country_flag = ethic_materialist }
				ethic_fanatic_spiritualist = { set_country_flag = ethic_spiritualist }
				ethic_fanatic_authoritarian = { set_country_flag = ethic_authoritarian }
				ethic_fanatic_egalitarian = { set_country_flag = ethic_egalitarian }
				ethic_fanatic_militarist = { set_country_flag = ethic_militarist }
				ethic_fanatic_pacifist = { set_country_flag = ethic_pacifist }
			}
		}
	
		option = {
			name = utopia.1.a
			ai_chance = {
				factor = 90
			}
			IF = { limit = { exists = event_target:ringworld_builder }
				event_target:ringworld_builder = { country_event = { id = utopia.2 days = 5 } }
			}
		}
	
		option = {
			name = utopia.1.b
			custom_tooltip = utopia.1.b.tooltip
			switch = {
				trigger = has_ethic
				ethic_fanatic_xenophobe = { custom_tooltip = utopia.1.b.tooltip.phobe }
				ethic_fanatic_xenophile = { custom_tooltip = utopia.1.b.tooltip.phile }
				ethic_fanatic_materialist = { custom_tooltip = utopia.1.b.tooltip.mater }
				ethic_fanatic_spiritualist = { custom_tooltip = utopia.1.b.tooltip.spiri }
				ethic_fanatic_authoritarian = { custom_tooltip = utopia.1.b.tooltip.autho }
				ethic_fanatic_egalitarian = { custom_tooltip = utopia.1.b.tooltip.egali }
				ethic_fanatic_militarist = { custom_tooltip = utopia.1.b.tooltip.milit }
				ethic_fanatic_pacifist = { custom_tooltip = utopia.1.b.tooltip.pacif }
			}
			ai_chance = {
				factor = 10
			}

			hidden_effect = { #Hidden so as to prevent long lists of pops - see custom tooltip
			switch = {
				trigger = has_ethic 
				ethic_fanatic_xenophobe = { 
					every_owned_pop = {
						limit = {
							has_ethic = ethic_xenophobe
							NOT = {
								has_modifier = megastructure_demands_rejected
							}
						}		
						add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
					}	
				}
				ethic_fanatic_xenophile = { 
					every_owned_pop = {
						limit = {
							has_ethic = ethic_xenophile
							NOT = {
								has_modifier = megastructure_demands_rejected 
							}
						}		
						add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
					}
				}
				ethic_fanatic_materialist = { 
					every_owned_pop = {
						limit = {
							has_ethic = ethic_materialist
							NOT = {
								has_modifier = megastructure_demands_rejected 
							}
						}		
						add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
					}
				}
				ethic_fanatic_spiritualist = { 
					every_owned_pop = {
						limit = {
							has_ethic = ethic_spiritualist
							NOT = {
								has_modifier = megastructure_demands_rejected 
							}
						}		
						add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
					}
				}
				ethic_fanatic_authoritarian = { 
					every_owned_pop = {
						limit = {
							has_ethic = ethic_authoritarian
							NOT = {
								has_modifier = megastructure_demands_rejected 
							}
						}		
						add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
					}
				}
				ethic_fanatic_egalitarian = { 
					every_owned_pop = {
						limit = {
							has_ethic = ethic_egalitarian
							NOT = {
								has_modifier = megastructure_demands_rejected 
							}
						}		
						add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
					}
				}
				ethic_fanatic_militarist = { 
					every_owned_pop = {
						limit = {
							has_ethic = ethic_militarist
							NOT = {
								has_modifier = megastructure_demands_rejected 
							}
						}		
						add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
					}
				}
				ethic_fanatic_pacifist = { 
					every_owned_pop = {
						limit = {
							has_ethic = ethic_pacifist
							NOT = {
								has_modifier = megastructure_demands_rejected 
							}
						}		
						add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
					}
				}	
			}
		}
			country_event = { id = utopia.10001 days = 1 }
		}
	}
	
	#fix for ringworld event crash#
	country_event = {
		id = utopia.10001
		hide_window = yes
		is_triggered_only = yes
		
		immediate = {
	
			IF = {
				limit = { 
					has_country_flag = ringworld_diplomatic_event
					has_country_flag = ethic_xenophobe
				}
				every_owned_pop = {
					limit = {
						has_ethic = ethic_xenophobe
						NOT = {
							has_modifier = megastructure_demands_rejected 
						}
					}
					add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
				}
			}
			IF = {
				limit = { 
					has_country_flag = ringworld_diplomatic_event
					has_country_flag = ethic_xenophile
				}
				every_owned_pop = {
					limit = {
						has_ethic = ethic_xenophile
						NOT = {
							has_modifier = megastructure_demands_rejected 
						}
					}
					add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
				}
			}
			IF = {
				limit = { 
					has_country_flag = ringworld_diplomatic_event
					has_country_flag = ethic_materialist
				}
				every_owned_pop = {
					limit = {
						has_ethic = ethic_materialist
						NOT = {
							has_modifier = megastructure_demands_rejected 
						}
					}
					add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
				}
			}
			IF = {
				limit = { 
					has_country_flag = ringworld_diplomatic_event
					has_country_flag = ethic_spiritualist
				}
				every_owned_pop = {
					limit = {
						has_ethic = ethic_spiritualist
						NOT = {
							has_modifier = megastructure_demands_rejected 
						}
					}
					add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
				}
			}
			IF = {
				limit = { 
					has_country_flag = ringworld_diplomatic_event
					has_country_flag = ethic_authoritarian
				}
				every_owned_pop = {
					limit = {
						has_ethic = ethic_authoritarian
						NOT = {
							has_modifier = megastructure_demands_rejected 
						}
					}
					add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
				}
			}
			IF = {
				limit = { 
					has_country_flag = ringworld_diplomatic_event
					has_country_flag = ethic_egalitarian
				}
				every_owned_pop = {
					limit = {
						has_ethic = ethic_egalitarian
						NOT = {
							has_modifier = megastructure_demands_rejected 
						}
					}
					add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
				}
			}
			IF = {
				limit = { 
					has_country_flag = ringworld_diplomatic_event
					has_country_flag = ethic_militarist
				}
				every_owned_pop = {
					limit = {
						has_ethic = ethic_militarist
						NOT = {
							has_modifier = megastructure_demands_rejected 
						}
					}
					add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
				}
			}
			IF = {
				limit = { 
					has_country_flag = ringworld_diplomatic_event
					has_country_flag = ethic_pacifist
				}
				every_owned_pop = {
					limit = {
						has_ethic = ethic_pacifist
						NOT = {
							has_modifier = megastructure_demands_rejected 
						}
					}
					add_modifier = { modifier = megastructure_demands_rejected days = 7200 }
				}
			}
		}
	}
	#fix for ringworld event crash#

# The Synthetic Age
country_event = {
	id = utopia.2551
	title = "utopia.2551.name"
	desc = "utopia.2551.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_synthetic_evolution

	is_triggered_only = yes

	immediate = {
		set_country_flag = synthetic_empire

		give_technology = { tech = tech_bio_reactor message = no }
		add_modifier = {
			modifier = echo_synthetic_bio
			days = -1
		}
		create_species = {
			is_mod = yes
			name = this
			namelist = this
			plural = this
			class = "ROBOT"
			portrait = "default_robot"
			traits = {
				trait = "trait_mechanical"
			}

			effect = {
				if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
					prev = {
						switch = {
							trigger = is_species_class
							HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } } }
							MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } } }
							REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } } }
							AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } } }
							ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } } }
							MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } } }
							FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } } }
							PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } } }
							LITHOID = { prev = { change_species_characteristics = { portrait = "lith_machine" } } }
							NECROID = { prev = { change_species_characteristics = { portrait = "nec_machine" } } }
						}
					}
				}

				rename_species = {
					prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
					name_list = ascension_list
				}

				save_event_target_as = new_robotic_species
			}
		}
		every_owned_pop = {
			limit = {
				species = {
					has_trait = trait_cybernetic
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					has_trait = trait_cybernetic
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_cybernetic
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_cybernetic
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_leader = {
			limit = {
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = {
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_ruler_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		change_dominant_species = { species = event_target:new_robotic_species }

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			if = {
				limit = { leader_class = admiral }
				add_trait = leader_trait_admiral_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_admiral_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = general }
				add_trait = leader_trait_general_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_general_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = governor }
				add_trait = leader_trait_governor_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_governor_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = scientist }
				add_trait = leader_trait_scientist_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_scientist_cyborg
				remove_ruler_trait = leader_trait_ruler_cyborg
			}
			if = {
				limit = { leader_class = ruler }
				add_trait = leader_trait_ruler_synthetic
				add_ruler_trait = leader_trait_ruler_synthetic
				remove_trait = leader_trait_ruler_cyborg
			}
		}

		observer_event = { id = observer.4 }
		every_country = {
			limit = {
				is_ai = no
				NOT = { is_same_value = root }
				has_communications = root
			}
			country_event = { id = utopia.2555 days = 5 }
			country_event = { id = utopia.2556 days = 10 }
		}
		if = {
			limit = {
				any_country = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
			}
			random_country = {
				limit = {
					OR = {
						is_country_type = fallen_empire
						is_country_type = awakened_fallen_empire
					}
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = utopia.2557 days = 15 }
			}
		}
		else = {
			random_country = {
				limit = {
					is_country_type = default
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = utopia.2557 days = 15 }
			}
		}

		ROOT = {
			set_country_flag = synthetic_age
		}
		if = {
			limit = {
				has_origin = origin_gpm_precursor_world
				has_country_flag = synthetic_age
			}
			country_event = {
				id = echo_events.7
				days = 5
			}
		}
	}

	option = {
		name = "utopia.2551.a"
		custom_tooltip = SYNTH_ASSIMILATION_CITIZENSHIP_ENABLED
	}
}