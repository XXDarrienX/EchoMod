################################
#
# Anniversary Events
#
# Written by Douglas Furen
#
###############################

namespace = drones

# Ancient Mining Drone Expansion Fleet - Recurring spawn and assign event
# Early to Mid-game - Unclaimed systems only
event = {
	id = drones.1001
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = event_target:drone_country
		event_target:drone_country = {
			check_variable = {
				which = expansion_fleets_sent_var
				value <= 5
			}
			NOT = {
				has_country_flag = mining_drone_expansion_ongoing
			}
		}
		any_system = {
			NOR = {
				exists = starbase
				is_star_class = sc_black_hole
				any_fleet_in_system = {
					exists = owner
					owner = {
						is_guardian_country = yes
					}
				}
			}
			any_system_planet = {
				NOR = {
					is_planet_class = pc_gas_giant
					is_star = yes
				}
			}
		}
	}

	immediate = {
		event_target:drone_country = {
			change_variable = {
				which = expansion_fleets_sent_var
				value = 1
			}
			set_country_flag = mining_drone_expansion_ongoing
		}
		random_system = {
			limit = {
				any_fleet_in_system = {
					exists = owner
					owner = {
						is_country_type = drone
					}
				}
			}
			save_event_target_as = drone_expansion_starting_system
			random_system_planet = {
				limit = {
					is_star = no
				}
				save_event_target_as = drone_expansion_starting_planet
			}		
		}
		random_system = {
			limit = {
				NOR = {
					exists = starbase
					is_star_class = sc_black_hole
					any_fleet_in_system = {
						exists = owner
						owner = {
							is_guardian_country = yes
						}
					}
				}
				any_system_planet = {
					NOR = {
						is_planet_class = pc_gas_giant
						is_star = yes
					}
				}
			}
			save_event_target_as = drone_expansion_destination_system
		}
		event_target:drone_expansion_starting_system = {
			create_country = {
				name = "NAME_Mining_Drone_Expansion_Initiative"
				type = faction
				flag = {
					icon = {
						category = "legion"
						file = "flag_mp_beta_04.dds"
					}
					background = {
						category = "backgrounds"
						file = "00_solid.dds"
					}
					colors = {
						"black"
						"black"
						"null"
						"null"
					}
				}
				effect = {
					set_faction_hostility = {
						set_hostile = no
						set_neutral = yes
						set_friendly = no
					}
					save_global_event_target_as = drone_expansion_country
					set_country_flag = drone_country
					every_country = {
						limit = {
							has_communications = event_target:drone_country
						}
						establish_communications_no_message = event_target:drone_expansion_country
					}
				}
			}
			last_created_country = {
				create_fleet = {
					name = "NAME_Mining_Drone_Expansion_Fleet"
					effect = {
						set_owner = event_target:drone_expansion_country
						set_fleet_stance = passive
						create_ship = {
							name = ""
							design = "NAME_Ancient_Mining_Expansion_Barge"
						}
						while = {
							count = 4
							create_ship = {
								name = ""
								design = "NAME_Ancient_Mining_Expansion_Drone"
							}
						}
						set_location = {
							target = event_target:drone_expansion_starting_planet
							distance = 25
							angle = random
						}
						save_event_target_as = drone_expansion_fleet
						queue_actions = {
							wait = {
								duration = 20
								random = 10
							}
							move_to = event_target:drone_expansion_destination_system
							effect = {
								id = "drones.1001.effect.1"
								event_target:drone_expansion_country = {
									country_event = { id = drones.1002 }
								}
							}
						}	
					}
				}
			}
		}
	}
}

# Ancient Mining Drone Expansion Fleet - Fleet erase, and base creation event
country_event = {
	id = drones.1002
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		create_drone_country = yes
		event_target:drone_expansion_destination_system	= {
			random_system_planet = {
				limit = {
					is_star = no
				}
				save_event_target_as = base_of_operations
			}
			if = {
				limit = {
					NOT = { exists = starbase }
				}
				create_fleet = {
					name = "NAME_Mining_Corps"
					effect = {
						set_owner = event_target:drone_country
						while = {
							count = 6
							create_ship = {
								name = ""
								design = "NAME_Ancient_Mining_Drone"
							}
						}
						set_location = {
							target = event_target:base_of_operations
							distance = 20
							angle = 20
						}
						set_formation_scale = 2
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = return_point
						set_aggro_range = 200
					}
				}
				solar_system = {
					random_system_planet = {
						limit = {
							NOR = {
								is_planet_class = pc_gas_giant
								is_star = yes
							}
						}
						create_mining_station = {
							owner = event_target:drone_country
						}
					}
					random_fleet_in_system = {
						limit = {
							exists = owner
							owner = {
								is_same_value = root
							}
						}
						destroy_fleet = this
					}
				}
				event_target:drone_country = {
					remove_country_flag = mining_drone_expansion_ongoing
				}
				root = {
					destroy_country = yes
				}
			}
			else = {
				random_system = {
					limit = {
						NOR = {
							exists = starbase
							is_star_class = sc_black_hole
							any_fleet_in_system = {
								owner = {
									is_guardian_country = yes
								}
							}
						}
						any_system_planet = {
							NOR = {
								is_planet_class = pc_gas_giant
								is_star = yes
							}
						}
					}
					save_event_target_as = drone_expansion_destination_system
				}
				event_target:drone_expansion_fleet = {
					queue_actions = {
						wait = {
							duration = 20
							random = 10
						}
						move_to = event_target:drone_expansion_destination_system
						effect = {
							id = "drones.1002.effect.1"
							event_target:drone_expansion_country = {
								country_event = { id = drones.1002 }
							}
						}
					}	
				}
			}
		}
	}
}

# Ancient Mining Drone Expansion Fleet - Recurring spawn and assign event
# Mid-game to End-game - May go into claimed systems
event = {
	id = drones.1003
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		mid_game_years_passed > 1
		exists = event_target:drone_country
		event_target:drone_country = {
			check_variable = { 
				which = aggressive_expansion_fleets_sent_var
				value <= 10
			}
			NOT = {
				has_country_flag = mining_drone_expansion_ongoing
			}
  		}
  		any_system = {
  			OR = {
				NOT = { exists = space_owner }
				AND = {
					exists = space_owner
					space_owner = {
						NOT = { is_country_type = fallen_empire }
					}
				}
			}
			NOR = {
				is_star_class = sc_black_hole
				any_fleet_in_system = {
					exists = owner
					owner = {
						is_guardian_country = yes
					}
				}
			}
			any_system_planet = {
				NOR = {
					is_planet_class = pc_gas_giant
					is_star = yes
				}
			}
		}
	}

	immediate = {
		event_target:drone_country = {
			change_variable = {
				which = aggressive_expansion_fleets_sent_var
				value = 1
			}
			set_country_flag = mining_drone_expansion_ongoing
		}
		random_system = {
			limit = {
				any_fleet_in_system = {
					exists = owner
					owner = {
						is_country_type = drone
					}
				}
			}
			save_event_target_as = aggressive_drone_expansion_starting_system
			random_system_planet = {
				limit = {
					is_star = no
				}
				save_event_target_as = aggressive_drone_expansion_starting_planet
			}		
		}
		random_system = {
			limit = {
  				OR = {
					NOT = { exists = space_owner }
					AND = {
						exists = space_owner
						space_owner = {
							NOT = { is_country_type = fallen_empire }
						}
					}
				}
				NOR = {
					is_star_class = sc_black_hole
					any_fleet_in_system = {
						exists = owner
						owner = {
							is_guardian_country = yes
						}
					}
				}
				any_system_planet = {
					NOR = {
						is_planet_class = pc_gas_giant
						is_star = yes
					}
				}
			}
			save_event_target_as = aggressive_drone_expansion_destination_system
		}
		event_target:aggressive_drone_expansion_starting_system = {
			create_country = {
				name = "NAME_Aggressive_Mining_Drone_Expansion_Initiative"
				type = faction
				flag = {
					icon = {
						category = "legion"
						file = "flag_mp_beta_05.dds"
					}
					background = {
						category = "backgrounds"
						file = "00_solid.dds"
					}
					colors = {
						"black"
						"black"
						"null"
						"null"
					}
				}
				effect = {
					set_faction_hostility = {
						set_hostile = no
						set_neutral = yes
						set_friendly = no
					}
					set_country_flag = drone_country
					save_global_event_target_as = aggressive_drone_expansion_country
					every_country = {
						limit = {
							has_communications = event_target:drone_country
						}
						establish_communications_no_message = event_target:aggressive_drone_expansion_country
					}
				}
			}
			last_created_country = {
				create_fleet = {
					name = "NAME_Aggressive_Mining_Drone_Expansion_Fleet"
					effect = {
						set_owner = event_target:aggressive_drone_expansion_country
						set_fleet_stance = passive
						create_ship = {
							name = ""
							design = "NAME_Ancient_Mining_Expansion_Barge"
						}
						while = {
							count = 10
							create_ship = {
								name = ""
								design = "NAME_Ancient_Mining_Expansion_Drone"
							}
						}
						set_location = {
							target = event_target:aggressive_drone_expansion_starting_planet
							distance = 25
							angle = random
						}
						save_event_target_as = aggressive_drone_expansion_fleet
						queue_actions = {
							wait = {
								duration = 20
								random = 10
							}
							move_to = event_target:aggressive_drone_expansion_destination_system
							effect = {
								id = "drones.1003.effect.1"
								event_target:aggressive_drone_expansion_country = {
									country_event = { id = drones.1004 }
								}
							}
						}	
					}
				}
			}
		}
	}
}

# Ancient Mining Drone Expansion Fleet - Fleet erase, and base creation event
country_event = {
	id = drones.1004
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		create_drone_country = yes
		event_target:aggressive_drone_expansion_destination_system	= {
			random_system_planet = {
				limit = {
					is_star = no
				}
				save_event_target_as = aggressive_base_of_operations
			}
			if = {
				limit = {
					NOT = { exists = starbase }
				}
				create_fleet = {
					name = "NAME_Mining_Corps"
					effect = {
						set_owner = event_target:drone_country
						while = {
							count = 10
							create_ship = {
								name = ""
								design = "NAME_Ancient_Mining_Drone"
							}
						}
						while = {
							count = 8
							create_ship = {
								name = ""
								design = "NAME_Ancient_Combat_Drone"
							}
						}
						while = {
							count = 6
							create_ship = {
								name = ""
								design = "NAME_Ancient_Destroyer"
							}
						}
						set_location = {
							target = event_target:aggressive_base_of_operations
							distance = 20
							angle = 20
						}
						set_formation_scale = 3
						set_fleet_stance = aggressive
						set_aggro_range_measure_from = return_point
						set_aggro_range = 400
					}
				}
				solar_system = {
					random_system_planet = {
						limit = {
							NOR = {
								is_planet_class = pc_gas_giant
								is_star = yes
							}
						}
						create_mining_station = {
							owner = event_target:drone_country
						}
					}
					random_system_planet = {
						limit = {
							NOR = {
								is_planet_class = pc_gas_giant
								is_star = yes
							}
						}
						create_mining_station = {
							owner = event_target:drone_country
						}
					}
					random_system_planet = {
						limit = {
							NOR = {
								is_planet_class = pc_gas_giant
								is_star = yes
							}
						}
						create_mining_station = {
							owner = event_target:drone_country
						}
					}
					random_fleet_in_system = {
						limit = {
							exists = owner
							owner = {
								is_same_value = root
							}
						}
						destroy_fleet = this
					}
				}
				event_target:drone_country = {
					remove_country_flag = mining_drone_expansion_ongoing
				}
				root = {
					destroy_country = yes
				}
			}
			else = {
				random_system = {
					limit = {
  						OR = {
							NOT = { exists = space_owner }
							AND = {
								exists = space_owner
								space_owner = {
									NOT = { is_country_type = fallen_empire }
								}
							}
						}
						NOR = {
							is_star_class = sc_black_hole
							any_fleet_in_system = {
								exists = owner
								owner = {
									is_guardian_country = yes
								}
							}
						}
						any_system_planet = {
							NOR = {
								is_planet_class = pc_gas_giant
								is_star = yes
							}
						}
					}
					save_event_target_as = aggressive_drone_expansion_destination_system
				}
				event_target:aggressive_drone_expansion_fleet = {
					queue_actions = {
						wait = {
							duration = 20
							random = 10
						}
						move_to = event_target:aggressive_drone_expansion_destination_system
						effect = {
							id = "drones.1004.effect.1"
							event_target:aggressive_drone_expansion_country = {
								country_event = { id = drones.1004 }
							}
						}
					}	
				}
			}
		}
	}
}

# Space Crystal Splitter Fleet - Recurring spawn and assign event
# Throughout the entire game
event = {
	id = drones.1010
	hide_window = yes
	is_triggered_only = yes

	trigger = {
		exists = event_target:crystal_country
		event_target:crystal_country = {
			check_variable = {
				which = splitter_fleets_sent_var
				value <= 20
			}
			NOT = {
				has_country_flag = space_crystal_expansion_ongoing
			}
		}
		any_system = {
			NOR = {
				is_star_class = sc_black_hole
				any_fleet_in_system = {
					exists = owner
					owner = {
						is_guardian_country = yes
					}
				}
			}
			any_system_planet = {
				is_asteroid = yes
			}
		}
	}

	immediate = {
		event_target:crystal_country = {
			change_variable = {
				which = splitter_fleets_sent_var
				value = 1
			}
			set_country_flag = space_crystal_expansion_ongoing
		}
		random_system = {
			limit = {
				any_fleet_in_system = {
					exists = owner
					owner = {
						is_country_type = crystal
					}
				}
			}
			save_event_target_as = crystal_splitter_starting_system
			random_system_planet = {
				limit = {
					is_star = no
				}
				save_event_target_as = crystal_splitter_starting_planet
			}		
		}
		random_system = {
			limit = {
				NOR = {
					is_star_class = sc_black_hole
					any_fleet_in_system = {
						exists = owner
						owner = {
							is_guardian_country = yes
						}
					}
				}
				any_system_planet = {
					is_asteroid = yes
				}
			}
			random_system_planet = {
				limit = {
					is_asteroid = yes
				}
				save_event_target_as = crystal_splitter_destination_planet
			}
			random_system_planet = {
				limit = {
					is_star = yes
				}
				save_event_target_as = crystal_splitter_destination_sun
			}
		}
		event_target:crystal_splitter_starting_system = {
			create_country = {
				name = "NAME_Cracked_Crystalline_Shard"
				type = faction
				flag = {
					icon = {
						category = "pointy"
						file = "flag_pointy_15.dds"
					}
					background = {
						category = "backgrounds"
						file = "00_solid.dds"
					}
					colors = {
						"black"
						"black"
						"null"
						"null"
					}
				}
				effect = {
					set_country_flag = crystal_country
					set_faction_hostility = {
						set_hostile = no
						set_neutral = yes
						set_friendly = no
					}
					every_country = {
						limit = {
							has_modifier = pacified_crystals
						}
						prev = {
							set_faction_hostility = {
								set_hostile = no
								set_neutral = yes
								target = prev
							}
						}
					}
				
					save_global_event_target_as = crystal_splitter_country
					every_country = {
						limit = {
							has_communications = event_target:crystal_country
						}
						establish_communications_no_message = event_target:crystal_splitter_country
					}
				}
			}
			last_created_country = {
				create_fleet = {
					name = "NAME_Cracked_Crystalline_Shard"
					effect = {
						set_owner = event_target:crystal_splitter_country
						set_fleet_stance = passive
						create_ship = {
							name = ""
							design = "NAME_Cracked_Crystalline_Shard"
						}
						set_location = {
							target = event_target:crystal_splitter_starting_planet
							distance = 25
							angle = random
						}
						save_event_target_as = crystal_splitter_fleet
						queue_actions = {
							wait = {
								duration = 20
								random = 10
							}
							move_to = event_target:crystal_splitter_destination_planet
							effect = {
								id = "drones.1010.effect.1"
								event_target:crystal_splitter_country = {
									country_event = { id = drones.1011 }
								}
							}
						}	
					}
				}
			}
		}
	}
}

# Space Crystal Splitter Fleet - Fleet erase, and spawn of new fleet
country_event = {
	id = drones.1011
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		create_crystal_country = yes
		event_target:crystal_splitter_destination_planet = {
			create_fleet = {
				name = "NAME_Shardlings"
				effect = {
					set_owner = event_target:crystal_country
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Blue"
					}
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Blue"
					}
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Blue"
					}
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Blue"
					}
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Blue"
					}
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Blue"
					}
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Blue"
					}
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Blue"
					}
					create_ship = {
						name = ""
						design = "NAME_Small_Crystal_Entity_Blue"
					}
					set_fleet_formation = {
						position = { x = 14.0	y = -3.0	} #9
						position = { x = 1.3	y = -11.0	} #8
						position = { x = -10.5	y = 1.0		} #7
						position = { x = 3.0	y = 8.0		} #6
						position = { x = -4.3	y = -7.0	} #5
						position = { x = 8.0	y = 9.0		} #4
						position = { x = -4.0	y = 7.3		} #3 
						position = { x = 7.5	y = -10.5	} #2
						position = { x = 0.0	y = 0.0		} #1
					}
					set_formation_scale = 0.5
					set_fleet_stance = aggressive
					set_aggro_range_measure_from = return_point
					set_aggro_range = 40
					set_location = {
						target = event_target:crystal_splitter_destination_planet
						distance = 20
						angle = 20
					}
					queue_actions = {
						wait = {
							duration = 20
							random = 10
						}
						move_to = event_target:crystal_splitter_destination_sun
					}
				}
			}
			
			event_target:crystal_splitter_destination_planet = {
				change_pc = pc_shattered
			}
			root = {
				destroy_country = yes
			}
		}
	}

	after = {
		event_target:crystal_country = {
			remove_country_flag = space_crystal_expansion_ongoing
		}
	}
}
